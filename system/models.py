from django.db import models
from django.conf import settings
from django.contrib.auth.models import User
from django.contrib.postgres.fields import JSONField


# Create your models here.
class App(models.Model):
    # Enum - Ownership Type
    CHOICES_APP_STATUS = (
        ("AC", 'Active'),
        ("UM", 'Under Maintenance'),
        ("NA", "Not Available"),
    );

    CHOICES_APP_THEME = (
        ('A', 'default'),
        ('B', 'grey-bound'),
        ('C', 'metallic-shore'),
        ('D', 'red'),
        ('E', 'browny'),
        ('F', 'sky-lurk'),
        ('G', 'oceanic-blue')
    );

    name = models.CharField(max_length=50, blank=False)
    about = models.CharField(max_length=65, blank=False, default="NA")
    url = models.CharField(max_length=20, blank=True, default="#")
    theme = models.CharField(max_length=2, choices=CHOICES_APP_THEME, blank=True)
    status = models.CharField(max_length=2, choices=CHOICES_APP_STATUS, blank=False)

    def __str__(self):
        return "%s | %s" % (self.name, self.status)


class Apps_Assignment(models.Model):
    profile_name = models.CharField(max_length=60, blank=True, default="No Name")
    user_id_fk = models.ForeignKey(settings.AUTH_USER_MODEL, default=1, verbose_name="Select User", on_delete=models.CASCADE)
    app_id_fk = models.ForeignKey('App', on_delete=models.CASCADE, verbose_name="Select App", blank=False)
    menus = JSONField( verbose_name="Allowed Menus", blank=True, default="" )
    description = models.CharField(max_length=250, blank=True, verbose_name="Profile Description")

    def __str__(self):
        return "%s" % (self.profile_name)

    class Meta:
        verbose_name = "Apps Assignment"
        verbose_name_plural = "Apps Assignment"


class App_Form(models.Model):
    CHOICES_FORM_TYPE = (
        ("LIST", 'LIST'),
        ("REPORT", 'REPORT'),
        ("DETAIL", "DETAIL"),
        ("MIXED","MIXED")
    );
    app_id_fk = models.ForeignKey('App', on_delete=models.CASCADE, verbose_name="Select App", blank=False)
    form_type = models.CharField(max_length=6, choices=CHOICES_FORM_TYPE, blank=True)
    form_verbose = models.CharField(verbose_name="Form Name", max_length=80, blank=False)
    form_name_html = models.CharField(verbose_name="Form HTML-ID", max_length=40, blank=False)
    available_operations = JSONField(verbose_name="Available Operations", blank=False)
    search = JSONField(verbose_name="Search Fields", blank=False)
    filter = JSONField(verbose_name="Filter Fields", blank=False)
    lv_fields = JSONField(verbose_name="Form Fields", blank=True )
    is_active = models.BooleanField(default=True, blank=False)

    def __str__(self):
        return "%s | %s" % (self.form_verbose, self.app_id_fk)

    class Meta:
        verbose_name = "App Form"
        verbose_name_plural = "App Forms"


class User_Form_Level_Permission(models.Model):
    def get_autogenerated_code():
        last_id = User_Form_Level_Permission.objects.values('id').order_by('id').last()
        if not last_id:
            return "UFLP-" + str(1)
        return "UFLP-" + str(last_id['id'])

    code = models.CharField(max_length=8, default=get_autogenerated_code, editable=False)
    CHOICES_FORM_TYPE = (
        ("LIST", 'LIST'),
        ("REPORT", 'REPORT'),
        ("DETAIL", "DETAIL"),
        ("MIXED","MIXED")
    );
    form_type = models.CharField(max_length=6, choices=CHOICES_FORM_TYPE, blank=True, null=True)
    full_privilege_on = models.BooleanField(default=False, blank=False)
    app_assignment_id_fk = models.ForeignKey('Apps_Assignment', on_delete=models.CASCADE,
                                             verbose_name="Choose Apps Assignment", null=True, default=1)
    form_id_fk = models.ForeignKey('App_Form', on_delete=models.CASCADE, verbose_name="Select Form", null=False,
                                   default=1)
    form_url = models.CharField(verbose_name="Form URL", max_length=30, blank=False, default="")
    permission_str = JSONField(verbose_name="Permission String", blank=False, default={
        "field_mapping": {"field_1": "read-only", "field_2": "hidden", "field_3": "editable"}})
    available_operations = JSONField(verbose_name="Allowed Operations", blank=False,
                                     default=["select", "delete", "update", "add"])
    search = JSONField(verbose_name="Allowed Search", blank=False, default={"search": ["field_id_1", "field_id_2"]})
    filter = JSONField(verbose_name="Allowed Filter", blank=False, default={"filter": ["field_id_1", "field_id_2"]})

    def __str__(self):
        return "%s" % (self.code)
