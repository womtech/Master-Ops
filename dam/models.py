from django.db import models
from datetime import datetime
from django.contrib.auth.models import User

# Create your models here.
class Machine(models.Model):
  env_type = models.CharField(max_length=15, blank=False, choices=(("LINUX","LINUX"),("WINDOWS","WINDOWS"),("APPLE","APPLE")))
  identity = models.CharField(max_length=20, blank=False, verbose_name="Machine Code")
  pubic_key_path = models.CharField( max_length=150, blank=True, verbose_name="SSH Public Key" )
  latest_pulse_check = models.DateTimeField( null=False )
  lan_ip = models.CharField( max_length=40, blank=False, default="" )
  is_alive = models.BooleanField( blank=False )
  machine_status = models.CharField( max_length=4, choices=( ("NC","NOT CONFIGURED"),("OOS","OUT OF SERVICE"),("CO","CONFIGURED OK")) )

  def __str__(self):
    return "%s" % (self.identity)


class StorageDevice( models.Model ):
  def get_autogenerated_code():
    last_id = StorageDevice.objects.values('id').order_by('id').last()
    if not last_id:
      return "DAM/STLBL/"+str(1)
    return "DAM/STLBL/"+str( last_id['id'] )
  code = models.CharField( max_length = 20, default = get_autogenerated_code, editable = False)
  local_name = models.CharField( max_length = 50, blank=False)
  last_updated_on = models.DateTimeField( blank=False, default=datetime.now )

  def __str__(self):
    return "%s" % self.code


class CloudFile( models.Model ):
  def get_autogenerated_code():
    last_fxchange_id = CloudFile.objects.values('id').order_by('id').last()
    if not last_fxchange_id:
      return "CFILE-"+str(1)
    return "CFILE-"+str(last_fxchange_id['id'])
  code = models.CharField( max_length = 8, default = get_autogenerated_code, editable = False )
  nas_path = models.CharField( max_length = 200, blank = True )
  remote_storage_label = models.CharField( max_length = 100, blank = True  )
  storage_label = models.ForeignKey ( StorageDevice, null = True, blank=True, on_delete=models.CASCADE )
  remote_path = models.CharField( max_length = 200, blank = True )
  keywords = models.TextField(blank=True)
  hex_digest = models.CharField( max_length = 40, blank=False, default="")
  last_accessed_time = models.DateTimeField(null=True)
  retrieval_frequency = models.IntegerField( blank=True, default = 0 )
  is_readily_available = models.BooleanField( default = True )
  added_on = models.DateTimeField(auto_now_add=True)

  def __str__(self):
    return "%s" % (self.nas_path)

class Request( models.Model ):
  def get_autogenerated_code():
    last_id = Request.objects.values('id').order_by('id').last()
    if not last_id:
      return "DAM/REQ/"+str(1)
    return "DAM/REQ/"+str( last_id['id'] )
  code = models.CharField( max_length = 20, default = get_autogenerated_code, editable = False)
  machine = models.ForeignKey(Machine, related_name="request_from_machine", on_delete = models.CASCADE )
  cfile = models.ForeignKey( CloudFile, related_name="request_from_machine_for_cfile", on_delete=models.CASCADE )
  tat_minutes = models.IntegerField( blank=True, default=0  )
  request_placed_on = models.DateTimeField( default = datetime.now, blank=False, editable=False )
  request_closed_on = models.DateTimeField( blank = False )
  request_created_by = models.ForeignKey ( User, related_name='request_created_by', on_delete=models.CASCADE, null=False )
  request_served_by = models.ForeignKey( User, related_name="request_served_by", on_delete=models.CASCADE, null=False )
  status = models.BooleanField( blank = False, default=False )
  is_archieved = models.BooleanField( blank=False, default=False )

  def __str__(self):
    return "%s" % (self.code)

  class Meta:
    verbose_name = "Cloud File Request"
    verbose_name_plural = "Cloud File Requests"

class DownloadLog( models.Model ):
  def get_autogenerated_code():
    last_id = Request.objects.values('id').order_by('id').last()
    if not last_id:
      return "DAM/DWLD/"+str(1)
    return "DAM/DWLD/"+str( last_id['id'] )
  code = models.CharField( max_length = 20, default = get_autogenerated_code, editable = False)
  machine = models.ForeignKey(Machine, related_name="download_from_machine", on_delete = models.CASCADE )
  cfile = models.ForeignKey( CloudFile, related_name="cfile_downloaded", on_delete=models.CASCADE )
  downloaded_by = models.ForeignKey ( User, related_name='cfile_downloaded_by', on_delete=models.CASCADE, null=False )
  activity_time = models.DateTimeField( default = datetime.now, blank=False, editable=False )
  status = models.BooleanField( blank = False, default = False )

  def __str__(self):
    return "%s" % self.code

class Nudge( models.Model ):
  def get_autogenerated_code():
    last_id = Request.objects.values('id').order_by('id').last()
    if not last_id:
      return "DAM/NUDGE/"+str(1)
    return "DAM/NUDGE/"+str( last_id['id'] )
  code = models.CharField( max_length = 20, default = get_autogenerated_code, editable = False)
  machine = models.ForeignKey(Machine, related_name="nudge_from_machine", on_delete = models.CASCADE )
  cfile = models.ForeignKey( CloudFile, related_name="nudged_for_file", on_delete=models.CASCADE )
  nudged_by = models.ForeignKey ( User, related_name='nudged_by', on_delete=models.CASCADE, null=False )
  nudged_on = models.DateTimeField( default = datetime.now, blank=False, editable=False )
  status = models.BooleanField( blank = False, default = False )

  def __str__(self):
    return "%s" % self.code
