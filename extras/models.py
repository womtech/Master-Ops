# -*- coding: utf-8 -*-

from __future__ import unicode_literals
from django.contrib import admin
from django.db import models
from django.contrib.postgres.fields import ArrayField, JSONField
from datetime import date
from generic.models import Association_Type
from djmoney.models.fields import MoneyField
from django.contrib.auth.models import User

# Create your models here.
class Contact( models.Model ):

  def get_autogenerated_code():
    last_contact_id = Contact.objects.values('id').order_by('id').last()
    if not last_contact_id:
      return "CO-"+str(0)
    return "CO-"+str(last_contact_id['id'])

  code = models.CharField(max_length=8, default=get_autogenerated_code, editable=False )
  first_name = models.CharField( max_length = 150, blank = False )
  middle_name = models.CharField( max_length = 150, blank = True )
  last_name = models.CharField( max_length = 150, blank = False )
  official_name = models.CharField( max_length = 150, blank = True )
  contact_type = models.ForeignKey( Association_Type, null=True, on_delete=models.CASCADE)
  primary_contact = models.CharField( max_length = 35, blank = False )
  secondary_contact = models.CharField( max_length = 35, blank = True )
  primary_email = models.CharField( max_length = 85, blank = False )
  secondary_email = models.CharField( max_length = 85, blank = True )
  remark = models.CharField( max_length = 255, blank = True )
  is_active = models.BooleanField( default = False, blank = False )

  def __str__(self):
    return "%s | %s" % ( self.first_name + " " + self.last_name, self.code )

  class Meta:
    verbose_name = "Contact"
    verbose_name_plural = "Contacts"


class Partner( models.Model):

  def get_autogenerated_code():
    last_partner_id = Partner.objects.values('id').order_by('id').last()
    if not last_partner_id:
      return "PT-"+str(0)
    return "PT-"+str(last_partner_id['id'])

  code = models.CharField( max_length = 8, default=get_autogenerated_code, editable=False )
  partner_name = models.CharField( max_length = 150, blank = False )
  email = models.CharField( max_length = 85, blank = True )
  phone = models.CharField( max_length = 35, blank = True, verbose_name="Phone Number (Including Extension Number)" )
  website = models.CharField( max_length = 80, blank = False )
  custom_id = models.CharField( max_length = 15, blank = True )
  poc = models.ManyToManyField( Contact, null=True )
  is_active = models.BooleanField( default=False, blank = False)

  def __str__(self):
    return "%s | %s" % (self.partner_name, self.code)


class FExchange(models.Model):

  def get_autogenerated_code():
    last_fxchange_id = FExchange.objects.values('id').order_by('id').last()
    if not last_fxchange_id:
      return "FEX-"+str(1)
    return "FEX-"+str(last_fxchange_id['id'])

  code = models.CharField( max_length = 8, default=get_autogenerated_code, editable=False )
  date = models.DateField(blank = False, default = date.today, )
  currency_from = MoneyField(max_digits=10, decimal_places=2, default_currency='USD')
  currency_to = MoneyField(max_digits=10, decimal_places=2, default_currency='INR')
  added_on = models.DateTimeField( auto_now_add = True  )
  #added_by = models.ForeignKey(User,null=False, on_delete= models.CASCADE, editable= False)

  def __str__ (self):
    return "%s  | %s |  %s " % (self.code, self.currency_from, self.currency_to )

  class Meta:
    unique_together = ('date', 'currency_from', 'currency_to')
    verbose_name = "Foreign Exchange"
    verbose_name_plural = "Foreign Exchange"
